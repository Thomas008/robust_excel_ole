= RobustExcelOle

robust_excel_ole wraps the win32ole library, and allows to perform various operations in Excel with ruby.

== Description

robust_excel_ole started as a simple fork from tomiacannondale's wrap_excel adapted to Ruby 1.8.6.
The functionality of wrap_excel is optimised and extended by new features.
Most notable extensions include:
* books can be opened in already running Excel instances (instead of opening Excel whenever a book is opened)
* book management system stores all books that have been open. This book store is being used, e.g., for reopening a book that has been closed before

Thus some features in robust_excel_ole that are not compatible with wrap_excel:
* +open+ uses by default a running Excel instance instead of creating a new one,
  and opens a book by default in writable mode instead of read_only 
* +close+ closes the workbook instead of closing all workbooks and the Excel instance.
* +save_as+ instead of +save+.

This is work in progress.

== Requirements

* Ruby 1.8.6 or higher

== Install

  gem install robust_excel_ole

== Usage

=== Including robust_excel_ole.

  include RobustExcelOle

=== Opening a book.

Example:

  book = Book.open('simple.xls')

Open a book with a block. 
The semantics is similar to, e.g.,  File.open.

  Book.open('simple.xls') do |book|
    # do something
  end

Options are the following:

+:default_excel+::   open in the Excel instance used before if the book was once open
+:force_excel+::     open in a new or given Excel instance  
+:if_unsaved+::      specify behaviour if the book was unsaved 
+:if_obstructed+::   specidy behaviour if the book is blocked by another book
+:read_only+::       open in read-only mode (default: +false+) 
+:displayalerts+::   allow display alerts in Excel (default: +false+)
+:visible+::         make visibe in Excel (default: +false+)

+:defaut_excel+  :

If the book was open before, then open it in the Excel instance used before. If the book cannot be reopened, then

+:reuse+:: (default) Connect to a running Excel, if it exists, open a new Excel otherwise.
+:new:: Open in a new Excel.
+<instance>:: Open in a given Excel instance.

+:force_excel  :

No matter if the book was open before,

+:new:: (default) Open in a new Excel.
+<instance>:: Open in a given Excel instance.

+:if_unsaved+  : 

If an unsaved book with the same name is open, then

+:raise+::   Raise an exeption. Don't open the book.
+:accept+::  Let the unsaved book open.
+:forget+::  Discard any changes and reopen the book.
+:new_excel+:: Open the new book in a new Excel instance
+:alert+::   Give control to Excel.

The option +:if_obstructed+ :

If a book with same name in a different path is open, then

+:raise+::          Raise an exception. Don't open the book.
+:forget+::         Close the old book, open the new book.
+:save+::           Save the old book, close it, open the new book
+:close_if_saved+:: Close the old book and open the new book, if the old book is saved, raise an exception otherwise
+:new_excel+::        Open the new book in a new Excel instance.

The values :displayalerts and :visible are reached to the class Excel that controls opening and closing Excel instances.

=== Closing a book.

Simple close.

  book.close

Options are the following:

+:if_unsaved+,  +:raise+ (default), +:save+, +:forget+, +:alert+

If the book is unsaved, then

+:raise+::  Raise an exception. Don't close the book.
+:save+::   Save the book before closing it.
+:forget+:: Close the book. 
+:alert+::  Give control to Excel.


=== Saving a book.

Simple save.

  book.save

Saving a book with a file name.

  book.save_as('another_simple.xls')

Options are the following:

+:if_exists+:: +:raise+ (default), +:overwrite+, +:alert+

The option +:if_exists+ :

If a book with the file name already exists, then

+:raise+::     Raise an exeption. Don't write the file.
+:overwrite+:: Delete the existing file and write the file. If the book is open in an Excel instance, then raise an exception.
+:alert+::     Give the control to Excel.
  

=== Unobtrusively modifying a book

The status of the book, i.e. whether it is open or closed, and in the case that it is open, whether it is saved or unsaved, remains unchanged after modifying it.

  Book.unobtrusively('simple.xls') do |book|
    # some modification
    sheet = book[0]
    sheet[0,0] = "c" 
  end
  


=== Identity.

Checking whether two referenced Excel workbooks are identical.

  if book1 == book2 then puts "Both referenced Excel workbooks are identical." 

=== Alive.

Checking whether the referenced Excel workbook responds to methods.

  if book.alive? then puts "book is responding."

=== File name. 

Getting the file name of the book with the absolute path that contains slash (/) instead of back slash (\).

  book.filename

=== Make a book visible or invisible in Excel.

Make the book visible.

  book.visible = true

Options: +true+ -> make visible , +false+ -> make invisible

Check whether the book is visible.
  
  if book.visible then p "visible"

=== Enable and disable DisplayAlerts in Excel.

Enable DisplayAlerts.

  book.displayalerts = true

Options: +true+ -> enable DisplayAlerts , +false+ -> Disable DisplayAlerts


Check whether DisplayAlerts is enabled.
  
  if book.displayalerts then p "DisplayAlerts enabled"



=== Accessing a sheet.

A sheet object can be accessed with a Book#[] method via an integer number.

  sheet = book[0]

Accessing a sheet object with the sheet name.

  sheet = book['Sheet1']

Accessing sheet objects using the methods Book#each.

  book.each do |sheet|               
    # do something with sheet
  end

=== Accessing a row or a column.

A sheet object is enumerable. Use the methods Sheet#each_column, Sheet#each_row or Sheet#each.

  sheet.each do |cell|
    # do something with cell
    # read every row every column
  end

  sheet.each_row do |row|
    # do something with row
  end

  sheet.each_column do |column|
    # do something with column
  end

=== Accessing a cell.

Reading a cell from a sheet object.

  sheet[0, 0]  => first cell.

Reading a cell from a range object.

  row_range[0]  => first cell in row_range
  column_range[1] => second cell in column_range

Reading the value of a cell.

  cell = sheet[0,0]
  cell.value  => value of the cell.

Writing a cell

  sheet[0,0] = "new_value"


=== Accessing a range of a row or column. 

Accessing a range of a row.

  sheet.row_range(0)  => first row
  sheet.row_range(0, 0..2 )  => first three cells of the first row  

Accessing a range of a column.

  sheet.col_range(2)  => third column
  sheet.col_range(2, 0..1)  => first two cells of the third column


=== Adding a sheet.

Adding a new sheet.

  book.add_sheet

Adding a new sheet with a name.

  book.add_sheet(:as => 'new_sheet')

Adding a new sheet with a name before another sheet.

  book.add_sheet(:as => 'new_sheet2', :before => another_sheet)

Adding a copy of a sheet with a name after another sheet.

  book.add_sheet(sheet, :as => 'sheet_copy', :after => another_sheet)


=== Creating and reusing an Excel instance.

Creating a new Excel.

  excel1 = Excel.create

Getting a running Excel instance and reusing it.

  excel2 = Excel.current

Reusing a running Excel instance, making it visible and turning on displayalerts.

   excel2 = Excel.new(:reuse => true, :visible => true, displayalerts => true).

Reusing a certain running Excel instance.

   excel3 = Excel.new(:excel => excel1)

=== Making Excel visible or invisible

Making Excel visible.

  excel = Excel.create
  excel.visible = true
  puts "visible" if excel.visible

Making Excel invisible

  excel.visible = false

=== Turning on or off Displayalerts.

Turning DisplayAlerts on.

  excel = Excel.create
  excel.displayalerts = true
  puts "allows displayalerts" if excel.displayalerts

Turning DisplayAlerts off.

  excel.displayalerts = false

Turning on and off in a block.
  
  with_displayalerts

  excel = Excel.create
  excel.with_displayalerts true do
    book = Book.open('simple.xls')
  end

=== Closing all Excel instances.

  Excel.close_all

=== Examples

Including robust_excel_ole.

  include RobustExcelOle

=== Example 1 

Opening a book.

  book = Book.open('simple.xls')

Accessing a sheet via its name.

  sheet = book['Sheet1']
  
Changing the first cell.

  sheet[0,0] = "new"
  
Saving the book.

  book.save

Saving the book with a different name, and overwrite if a file with this name exists.

  book.save_as('different_simple.xls', :if_exists => :overwrite)

Closing the book.

  book.close  

=== Example 2

Opening the book in a new Excel instance and make it visible.

  book.open('simple.xls', :reuse => false, :visible => true)

Adding a copy of the first sheet after the second sheet.

  book.add_sheet(book[0], :as => 'Sheet1_copy', :after => book[1])

Opening a new book with the same name in a new Excel. Leave the book that contains unsaved changes in the old Excel.

  new_book.open('simple.xls', :if_unsaved => :new_excel)

Accessing a sheet and change a cell.

  sheet = new_book[0]
  sheet[1,1] = "another"

Opening another book with the same name in the running Excel. The book that contains unsaved changes will be closed before. 

  third_book.open('simple.xls', :if_unsaved => :forget)

Adding a sheet.

  third_book.add_sheet

Closing the book without saving it.

  third_book.close(:if_unsaved => :forget)

Closing the first book and saving it before.

  book.close(:if_unsaved => :save)

=== Example 3

Opening a book.

  book1 = Book.open('simple.xls')

Opening a book with the same name in a different path. Close the old book.

  book2 = Book.open('more/simple.xls', :if_obstructed => :forget)

Changing its cell.

  sheet = book2[0]
  sheet[0,0] = "new"

Opening a book with the same name in a different path. The old book that was modified will be saved and closed before.

  book3 = Book.open('simple.xls', :if_obstructed => :save)

Opening a book with the same name in a different path. The other book will be closed, because it does not contain unsaved changes.

  book4 = Book.open('more/simple.xls', :if_obstructed => :close_if_unsaved)

Closing the book.

  book4.close


=== Want to do more things

All RobustExcelOle objects include the win32ole instance. 
If you want to do something that not provide a function, you can use win32ole methods.

== Support

This is work in progress. Please contact us and to report issues and feature requests to github Issues. 
https://github.com/Thomas008/robust_excel_ole/issues

== Collaborate

Please pull request on github.

== Author

thomas mailto:Thomas.Raths@gmx.net

== License

MIT License. For more imformation, please see LICENSE.
