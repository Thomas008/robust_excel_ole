= RobustExcelOle

robust_excel_ole wraps the win32ole, and uses the Excel operations with ruby.

== Description

robust_excel_ole started as a simple fork from tomiacannondale's wrap_excel adapted to Ruby 1.8.6.
The functionality of wrap_excel is optimised and extended by new features.

This is work in progress.

Notice some features in robust_excel_ole that are not compatible with wrap_excel:
* +save_as+ instead of +save+.
* +open+ uses a running Excel application by default instead of creating a new one. 
* +close+ closes the workbook instead of closing all workbooks and the Excel application.

== Requirements

* Ruby 1.9.2 or higher (platform is windows)
* also works with Ruby 1.8.6

== Install

  gem install robust_excel_ole

== Usage

=== Open a book.

Example:

  book = RobustExcelOle::Book.open('./sample.xls')

Open a book with a block. 
The semantics is similar to, e.g.,  File.open.

  RobustExcelOle::Book.open('./sample.xls') do |book|
    # do something
  end
                  

Options are the following:

[:reuse]         boolean (default: true). use an already open Excel-application 
[:read_only]     boolean (default: false). open in read-only mode  
[:displayalerts] boolean (default: false). allow display alerts in Excel   
[:visible]       boolean (default: false). make visibe in Excel                  
[:if_unsaved]    :raise (default), :accept, :forget, :new_app, :excel
[:if_unsaved_other_book]  :raise (default), :save, :forget, :new_app
                         

The option :if_unsaved  :  
if an unsaved book with the same name is open, then
          
[:raise ]  Raise an exception. Don't open the book.
[:accept]  Let the unsaved book open.                  
[:forget]  Close the unsaved book, open the new book.
[:new_app] Open the new book in a new Excel application
[:excel]   Give control to Excel.

The option :if_unsaved_other_book : 
if an unsaved book with same name in a different path is open, then
                 
[:raise]   Raise an exception. Don't open the book.
[:save]    Save and close the unsaved book and open the new book.
[:forget]  Close the unsaved book, open the new book.
[:new_app] Open the new book in a new Excel application.


Examples:

Open a book.

  book = RobustExcelOle::Book.open('./sample.xls')

Open another book in the same Excel application.

  new_book = RobustExcelOle::Book.open('./different.xls')

Open another book in a new Excel applications.

  new_book = RobustExcelOle::Book.open('./different.xls', :reuse => false)

Change the book (see below).

  sheet = book[0]
  book.add_sheet(sheet, :as => 'copyed_name')

Let the unsaved book open, when open a book while a book with the same name is unsaved and open.

  new_book = RobustExcelOle::Book.open('./sample.xls', :if_unsaved => accept)

=== Save a book.

  book.save

Save a book with a file name.

  book.save_as('./another_sample.xls')

Options are the following:

[:if_exists] :raise (default), :overwrite, :excel

[:raise]     Raise an exception. Don't write the file.
[:overwrite] Delete the old file and write the file.
[:excel]     Give the control to Excel.


Example:

Overwrite a book with the same name.

  book.save('./another_sample.xls', :if_exists => :overwrite)  

=== == (equal)

Check whether two referenced Excel workbooks are identical.

Example.

  if (book == new_book) then
    puts "the workbooks are identical"
  end

=== alive?

Check whether an Excel workbook responds to methods.

Example:

  if book.alive? then 
    puts "the book is alive"
  end

=== filename

Get the file name of the book.

Example:

  book.filename

=== Close a book.

Example:

  book.close

Options are the following:

[:if_unsaved]  :raise (default), :save, :forget, :excel  
               if the book is unsaved
                 
:raise 

Raise an exception. Don't close the book.                  
                 
:save            

Save the book before closing it.                  
                 
:forget          

Close the book. 
    
:excel           

Give control to Excel.



=== Access a sheet.

A sheet object can be accessed with a Book#[] method.

  sheet = book[0]

Access a sheet object with the sheet name.

    book['Sheet1']

=== Access a row or a column.

A sheet object is enumerable. Use the methods Sheet#each_column, Sheet#each_row or Sheet#each.

  sheet.each do |cell|
    # do something with cell
    # read every row every column
  end

  sheet.each_row do |row|
    # do something with row_range
  end

  sheet.each_column do |column_range|
    # do something with column_range
  end

=== Access a cell.

Read a cell from a sheet object.

  sheet[0, 0]  => first cell.

Read a cell from a range object.

  row_range[0]  => first cell in row_range
  column_range[1] => second cell in column_range



=== Want to do more things

All RobustExcelOle objects include the win32ole instance. 
If you want to do something that not provide a function, you can use win32ole methods.

== Support

This is work in progress. Please contact us and to report issues and feature requests to github Issues. 
https://github.com/Thomas008/robust_excel_ole/issues

== Collaborate

Please pull request on github.

== Author

thomas mailto:Thomas.Raths@gmx.net

== License

MIT License. For more imformation, please see LICENSE.
