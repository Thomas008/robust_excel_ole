= RobustExcelOle

robust_excel_ole wraps the win32ole library, and allows to perform various operations in Excel with ruby.

== Description

robust_excel_ole started as a simple fork from tomiacannondale's wrap_excel adapted to Ruby 1.8.6.
The functionality of wrap_excel is optimised and extended by new features.
Most noticable extension is that books are opened in a Excel application if it is already running, instead of opening Excel whenever a book is opened.

Thus some features in robust_excel_ole that are not compatible with wrap_excel:
* +open+ uses by default a running Excel application instead of creating a new one,
  and opens a book by default in writable mode instead of read_only 
* +close+ closes the workbook instead of closing all workbooks and the Excel application.
* +save_as+ instead of +save+.

This is work in progress.

== Requirements

* Ruby 1.8.6 or higher

== Install

  gem install robust_excel_ole

== Usage

=== Open a book.

Example:

  book = RobustExcelOle::Book.open('simple.xls')

Open a book with a block. 
The semantics is similar to, e.g.,  File.open.

  RobustExcelOle::Book.open('./sample.xls') do |book|
    # do something
  end

Options are the following:

+:read_only+::       open in read-only mode (default: +false+)  
+:if_unsaved+::      +:raise+ (default), +:accept+, +:forget+, +:new_app+, +:alert+
+:if_obstructed+::   :raise (default), +:forget+, +:save+, +:close_if_unsaved+, +:new_app+
+:reuse+::           use an already open Excel-application (default: +true+) 
+:excel+::           an Excel appication (default: +nil+)
+:displayalerts+::   allow display alerts in Excel (default: +false+)
+:visible+::         make visibe in Excel (default: +false+)

The option +:if_unsaved+  : 

If an unsaved book with the same name is open, then

+:raise+::   Raise an exeption. Don't open the book.
+:accept+::  Let the unsaved book open.
+:forget+::  Close the unsaved book, open the new book.
+:new_app+:: Open the new book in a new Excel application
+:alert+::   Give control to Excel.

The option +:if_obstructed+ :

If a book with same name in a different path is open, then

+:raise+::          Raise an exception. Don't open the book.
+:forget+::         Close the old book, open the new book.
+:save+::           Save the old book, close it, open the new book
+:close_if_saved+:: Close the old book and open the new book, if the old book is saved, raise an exception otherwise
+:new_app+::        Open the new book in a new Excel application.

The values :displayalerts and :visible are reached to the class Excel that controls opening and closing of Excel applications.

=== Close a book.

Simple close.

  book.close

Options are the following:

+:if_unsaved+,  +:raise+ (default), +:save+, +:forget+, +:alert+

If the book is unsaved, then

+:raise+::  Raise an exception. Don't close the book.
+:save+::   Save the book before closing it.
+:forget+:: Close the book. 
+:alert+::  Give control to Excel.


=== Save a book.

Simple save.

  book.save

Save a book with a file name.

  book.save_as('./another_sample.xls')

Options are the following:

+:if_exists+:: +:raise+ (default), +:overwrite+, +:alert+

The option +:if_exists+ :

If a book with the file name already exists, then

+:raise+::     Raise an exeption. Don't write the file.
+:overwrite+:: Delete the existing file and write the file. If the book is open in an Excel application, then raise an exception.
+:alert+::     Give the control to Excel.
  

=== Identity.

Check whether two referenced Excel workbooks are identical.

  if book1 == book2 then puts "Both referenced Excel workbooks are identical." 

=== Alive.

Check whether the referenced Excel workbook responds to methods.

  if book.alive? then puts "book is responding."

=== File name. 

Return the file name of the book with the absolute path that contains slash (/) instead of back slash (\).

  book.filename

=== Make a book visible in the current Excel application.

  book.visible = true

Option is: +true+ -> make visible , +false+ -> make invisible

=== Access a sheet.

A sheet object can be accessed with a Book#[] method via an integer number.

  sheet = book[0]

Access a sheet object with the sheet name.

  sheet = book['Sheet1']

Access sheet objects using the methods Book#each.

  book.each do |sheet|               
    # do something with sheet
  end

=== Access a row or a column.

A sheet object is enumerable. Use the methods Sheet#each_column, Sheet#each_row or Sheet#each.

  sheet.each do |cell|
    # do something with cell
    # read every row every column
  end

  sheet.each_row do |row|
    # do something with row
  end

  sheet.each_column do |column|
    # do something with column
  end

=== Access a cell.

Read a cell from a sheet object.

  sheet[0, 0]  => first cell.

Read a cell from a range object.

  row_range[0]  => first cell in row_range
  column_range[1] => second cell in column_range

Read the value of a cell.

  cell = sheet[0,0]
  cell.value  => value of the cell.

Write a cell

  sheet[0,0] = "new_value"


=== Access a range of a row or column. 

Access a range of a row.

  sheet.row_range(0)  => first row
  sheet.row_range(0, 0..2 )  => first three cells of the first row  

Access a range of a column.

  sheet.col_range(2)  => third column
  sheet.col_range(2, 0..1)  => first two cells of the third column


=== Add a sheet.

Add a new sheet.

  book.add_sheet

Add a new sheet with a name.

  book.add_sheet(:as => 'new_sheet')

Add a new sheet with a name before another sheet.

  book.add_sheet(:as => 'new_sheet2', :before => another_sheet)

Add a copy of a sheet with a name after another sheet.

  book.add_sheet(sheet, :as => 'sheet_copy', :after => another_sheet)

=== Turn on or off Displayalerts.

  with_displayalerts

Turn off or on Displayaerts of an Excel application.

  excel = RobustExcelOle::Excel.new
  excel.with_displayalerts true do
    book = RobustExcelOle::Book.open('simple.xls')
  end

=== Examples

Include robust_excel_ole.

  include RobustExcelOle

=== Example 1 

Open a book.

  book = Book.open('simple.xls')

Access a sheet via its name.

  sheet = book['Sheet1']
  
Change the first cell.

  sheet[0,0] = "new"
  
Save the book.

  book.save

Save the book with a different name, and overwrite if a file with this name exists.

  book.save_as('different_simple.xls', :if_exists => :overwrite)

Close the book.

  book.close  

=== Example 2

Open the book in a new Excel application and make it visible.

  book.open('simple.xls', :reuse => false, :visible => true)

Add a copy of the first sheet after the second sheet.

  book.add_sheet(book[0], :as => 'Sheet1_copy', :after => book[1])

Open a new book with the same name in a new Excel. Leave the book that contains unsaved changes in the old Excel.

  new_book.open('simple.xls', :if_unsaved => :new_app)

Access a sheet and change a cell.

  sheet = new_book[0]
  sheet[1,1] = "another"

Open another book with the same name in the running Excel. The book that contains unsaved changes will be closed before. 

  third_book.open('simple.xls', :if_unsaved => :forget)

Add a sheet.

  third_book.add_sheet

Close the book without saving it.

  third_book.close(:if_unsaved => :forget)

Close the first book and save it before.

  book.close(:if_unsaved => :save)

=== Example 3

Open a book.

  book1 = Book.open('simple.xls')

Open a book with the same name in a different path. Close the old book.

  book2 = Book.open('more/simple.xls', :if_obstructed => :forget)

Change its cell.

  sheet = book2[0]
  sheet[0,0] = "new"

Open a book with the same name in a different path. The old book that was modified will be saved and closed before.

  book3 = Book.open('simple.xls', :if_obstructed => :save)

Open a book with the same name in a different path. The other book will be closed, because it does not contain unsaved changes.

  book4 = Book.open('more/simple.xls', :if_obstructed => :close_if_unsaved)

Close the book.

  book4.close


=== Want to do more things

All RobustExcelOle objects include the win32ole instance. 
If you want to do something that not provide a function, you can use win32ole methods.

== Support

This is work in progress. Please contact us and to report issues and feature requests to github Issues. 
https://github.com/Thomas008/robust_excel_ole/issues

== Collaborate

Please pull request on github.

== Author

thomas mailto:Thomas.Raths@gmx.net

== License

MIT License. For more imformation, please see LICENSE.
