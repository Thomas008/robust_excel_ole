= RobustExcelOle

=== Opening a workbook.

If you want to open a workbook, you can use the methods +open+ or +new+.
  
  workbook = Workbook.open('spec/data/workbook.xls')

Once you have got an Workbook object, you can apply all VBA methods that you would apply to a VBA Workbook object
(see https://docs.microsoft.com/en-us/office/vba/api/excel.workbook#methods).
For some common and complex tasks you can use the methods of RobustExcelOle.

You can also open a workbook with a block. 
The semantics is similar to, e.g.,  +File.open+.

  Workbook.open('spec/data/workbook.xls') do |book|
    # do something
  end

The options are the following:

+:default+:: if the workbook was already open, then use the properties of this workbook.otherwise use the properties stated in +:default+

+:force+:: no matter whether the workbook was open before, use the properties stated in +:force+

+:excel+ and +:visible+ are options stated in +:default+ or +:force+

+:excel+::             specifies the Excel instance. 

+:visible+::           makes the workbook visible or invisible

+:if_unsaved+::        specifies behaviour if the workbook was unsaved (default: +:raise+)

+:if_blocked::         specifies behaviour if the workbook is blocked by another book (default: +:raise+)


+:read_only+::          opens in read-only mode (default: +false+)

+:check_compatibility:: checks compatibility when saving

+:calculation+::        forces the calculation mode to be manual (:manual) or automatic (:automatic)

+:if_absent+::          specifies behaviour if the workbook with the given file name does not exist if the workbook does not exist (default: +create+)

You can use the following abbreviations or synonyms: +:f+ for  +:force+, +:d+ for +:default+, +:e+ for +:excel+, and +:v+ for +:visible+, +:if_obstructed+ for +:if_blocked+. Finally you can leave out the option +:force+ or +:f+.

The option +:excel+ :

Valid values are : +:current+ (or +:active+ or +:reuse+), +:new+, or a given Excel instance (default: +:current).

The option +:if_unsaved+  : 

If a workbook contains unsaved changes and a new workbook with the same file name shall be opened, then

+:raise+::   Raise an exeption. Don't open the workbook.
+:accept+::  Let the unsaved workbook open.
+:forget+::  Discard any changes and reopen the workbook.
+:save+::    Save any changes and reopen the workbook
+:new_excel+:: Open the new workbook in a new Excel instance
+:alert+::   Give control to Excel.

The option +:if_blocked+ : 

If a workbook is open and a new workbook with same name and a different path is open, then

+:raise+::          Raise an exception. Don't open the workbook.
+:forget+::         Close the old workbook, open the new workbook.
+:save+::           Save the old workbook, close it, open the new workbook
+:close_if_saved+:: Close the old workbook and open the new workbook, if the old workbook is saved, otherwise raise an exception.
+:new_excel+::      Open the new workbook in a new Excel instance.

The option +:if_absent  :

If the Excel file does not exists, then

+:create+::   Create a new Excel file
+:raise+::    Raise an exception.
  
Here are a few examples:

If you want to open a workbook that was not opened before, or reopen a workbook that was open in an Excel instance that is now closed, in the current (active) Excel instance, then use

  workbook = Workbook.open('spec/data/workbook.xls', :default => {:excel => :current})

or
  
  workbook = Workbook.open('spec/data/workbook.xls')

In case you want to open such a workbook in a new Excel instance, then use

  workbook = Workbook.open('spec/data/workbook.xls', :default => {:excel => :new})

If you want to open a workbook in a new Excel instance, no matter if it was opened before, you can write

  workbook = Workbook.open('spec/data/workbook.xls', :force => {:excel => :new})

For simplicity, you can also leave out the +:force+ option (but not the +:default+ option).

  workbook = Workbook.open('spec/data/workbook.xls', :excel => :new)

You can also specify an Excel instance

  excel1 = Excel.create
  workbook = Workbook.open('spec/data/workbook.xls', :excel => excel1)

If you want to open the workbook and make its window visible, then use

  book = Workbook.open('spec/data/workbook.xls', :visible => true)

Notice, that when the workbook is visible, the DisplayAlerts of the respective Excel instance is true, if not explicitely DisplayAlerts is set to false in this Excel instance.
You can combine options, e.g. 

  workbook = Workbook.open('spec/data/workbook.xls', :visible => true, :default => {:excel => excel1})

You can use the abbreviations, e.g. in this case

  workbook = Workbook.open('spec/data/workbook.xls', :v => true, :d => {:e => excel1})  

If a workbook contains unsaved changes and a workbook with the same filename shall be opened, then the option +:if_unsaved+ manages this conflict. For example, if the workbook with the unsaved changes shall remain open, you can use

  workbook = Workbook.open('spec/data/workbook.xls', :if_unsaved => :accept)

If a workbook is open and a workbook with the same name but in different path shall be opened, i.e. the first workbook blocks opening the other workbook, then the option +:if_blocked+ handles this situation, e.g.

  workbook = Workbook.open('path/workbook.xls', :if_blocked => :forget)

Remarks:

The methods +open+ and +new+ connect to workbooks opened outside of RobustExcelOle as well.

Opening linked workbooks for EXCEL 2007 is supported

Doing updating links seems to be dependent on calculation mode: updates happen, if the calcultion mode is automatic, and does not happen, if calculation mode is manual.

=== Reopening a workbook.

A special feature of RobustExcelOle is that it allows to reopen workbooks after closing them.

  workbook = Workbook.open('spec/data/workbook.xls')
  workbook.close
  workbook.reopen

The closed workbook is now alive again, i.e. is open and responds to Excel methods.

=== Type-lifting WIN32OLE objects to RobustExcelOle objects

Type-lifting means here: enriching a given object of a certain class by properties and methods of another class. 
The method +General.to_reo+ enables type-lifting WIN32OLE objects to RobustExcelOle objects, in the sense that the attributes and methods of RobustExcelOle can be applied to these objects. For example, assume we have a WIN32OLE workbook +win32ole_workbook+:

  win32ole_workbook.to_class
  => WIN32OLE

This object can be type-lifted to a RobustExcelOle workbook.

  workbook = win32ole_workbook.to_reo
  workbook.to_class
  => RobustExcelOle::Workbook

Similarly, Excel, Worksheet, and Range WIN32OLE objects can be type-lifted to corresponding RobustExcelOle objects. 

The method +to_reo+ uses the method +new+. You can apply the method +new+ directly.

  workbook = Workbook.new(win32ole_workbook)

You can supply options, e.g. +:visible+.

   workbook = Workbook.new(win32ole_workbook, :visible => true) 


=== Identity transperence ===

A RobustExcelOle Workbook object is a proxy of an Excel WIN32OLE workbook. A Workbook object is defined by the full workbook name and the Excel instance in which it is opened. RobustExcelOle ensures identity transparency which means that identical Workbook objects refer to identical Excel workbooks, and vice versa. Identity transperence ensures that, no matter how a Workbook object was created - by filename or by type-lifting an Excel workbook - two Workbook objects are identical, if and only if the Excel workbooks, they are referring to, are identical. 

Similarly, each Excel, Worksheet and a Range object in RobustExcelOle is a proxy of a corresponding Excel, Worksheet and a Range object in WIN32OLE. For these objects identity transperence holds as well.

=== Opening workbooks given a network path and a hostname share path ===

RobustExcelOle allows opening workbooks via a network path starting with a drive letter different from the default drive (mostly 'C'), e.g. 

  workbook = Workbook.open('N:/data workbook.xls')

Likewise the corresponding hostname share path can be used, starting with '//', e.g.

  workbook = Workbook.open("//DESKTOP-A5D5GJ5/spec/data/workbook.xls")

where 'DESKTOP-A5D5GJ5' shall be the hostname, and 'data' be the share.

=== Unobtrusively modifying a workbook

The method +unobtrusively+ enables the user to read or modify a workbook, no matter if it is open in some Excel instance, if it is saved or unsaved, and if it is writable or not. When opening a workbook unobtrusively, its status remains unchanged. This status includes, whether the workbook is opened or closed, saved or unsaved, readonly or writable, visible or invisible, calculation mode is automatic or manual, and checking compatibility is turned on or off. 

Options are the following:

+:if_closed+:: the Excel instance in which to open the workbook, if it was closed (default: +:current+). (Note: this option works workbooks opened via RobustExcelOle only.)

+:read_only+:: Whether the workbook shall be forced to be open in ReadOnly mode
+:writable+::  Whether changes in the workbook shall be saved

+:keep_open+:: Whether the workbook shall be open after unobtrusively opening (default: false)

There are the class method and the instance method of +unobtrusively+. Here is an example of the class method:

  Workbook.unobtrusively('spec/data/workbook.xls') do |book|
    # some modification
    book.sheet(1)[1,1] = "c" 
  end

Here is an example of the instance method:

  book.unobtrusively do
    # some modification
    book.sheet(1)[1,1] = "c" 
  end
       
The methods +for_reading+ and +for_modifying+ indicate unobtrusively reading or modifying. 

  Workbook.for_modifying('spec/data/workbook.xls') do |book|
    # some modification
    book.sheet(1)[1,1] = "c"
  end

An example of the instance method would be

  book.for_modifying do
    # some modification
    book.sheet(1)[1,1] = "c"
  end
  
Note, that the methods +unobtrusively+, +for_reading+ and +for_modifying+ work not only for workbooks opened via RobustExcelOle, but connect to workbooks opened outside RobustExcelOle as well.

=== Retaining the saved-status

This method ensures keeping the save status of the workbook

  workbook = Workbook.open('spec/data/workbook.xls')
  workbook.retain_saved do
    # some reading or modifying
  end

=== Checking whether the workbook is alive.

The method +alive?+ finds out whether the Excel workbook that is referenced by the Workbook object responds to methods. For example

  workbook.alive?
  # => true

== Code

workbook.rb[https://github.com/Thomas008/robust_excel_ole/blob/master/lib/robust_excel_ole/workbook.rb]
