= RobustExcelOle

== Reading and writing the contents of ranges and cells

RobustExcelOle enables to read and write the contents of ranges and cells in workbooks. This can be done from a Worksheet, a Workbook or an Excel object representing a Worksheet, Workbook, or Application object, respectively. You can use VBA methods or methods provided by RobustExcelOle.

=== Introducing Example

Suppose you have opened a workbook.

  workbook = Workbook.open('spec/data/workbook.xls', visible: true)

We access the first worksheet:
  
  worksheet = workbook.sheet(1)

Now we can access a range consisting of one cell by providing the row and and the column of a cell. With help of VBA methods you can put

  worksheet.Range(sheet.Cells(1,2))

or using RobustExcelOle

  range = worksheet.range([1,2])

or, using the A1-format,

  range = worksheet.range("B1")

Similarly you can access a rectangular range. Using VBA methods we provide the row and column of the top left cell and the row and column of the bottum right cell. 

  range = worksheet.Range(sheet.Cells(1,1), sheet.Cells(3,4))

In RobustExcelOle we would supply the rows and columns as integer ranges.

  range = worksheet.range([1..3,1..4])

or, using the A1-format

  range = worksheet.range([1..3,"A".."D"])

or

  range = worksheet.range(["A1:D3"])

Now you can read the values by 

  range.Value
  => [["foo", "workbook", "sheet1", nil], ["foo", nil, "foobaaa", nil], ["matz", "is", "nice", nil]]

or

  range.value or range.v
  => [["foo", "workbook", "sheet1", nil], ["foo", nil, "foobaaa", nil], ["matz", "is", "nice", nil]]

or as flat array
  
  range.values
  =>  ["foo", "workbook", "sheet1", nil, "foo", nil, "foobaaa", nil, "matz", "is", "nice", nil]

You can get the values of a range directly with help of the method #[], e.g.

  worksheet[1..3,1..4]
  => [["foo", "workbook", "sheet1", nil], ["foo", nil, "foobaaa", nil], ["matz", "is", "nice", nil]]

You can set values with help of the method #[]= ,e.g.

  worksheet[1..3,1..4] = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]


Alternatively you can use #Value=, #value= or #v=, or #set_value, e.g.

  range.Value = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]

or 

  range.value = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]

or

  range.v = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]

or

  range.set_value([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

You can color the range when setting the contents of a range.

  range.set_value([[1,2,3,4],[5,6,7,8],[9,10,11,12]], color: 42)

Now we copy the range. With help of VBA methods you would do

  range.Copy(destination: sheet.range([4,5]).ole_range)

or with help of RobustExcelOle

  range.copy([4,5])

You can also copy a range into another worksheet in another workbook.

  workbook2 = Workbook.open('spec/data/another_workbook.xls', excel: :new, visible: true)
  range.copy([4,5],book2.sheet(3))

Now we define a name that refers to a range consisting of only the first cell, i.e. the 1st row and 1st column. Using VBA methods, you can use

  workbook.Names.Add("Name" => "name", "RefersToR1C1" => "=Z1S1")

RobustExcelOle provides the method +add_name+.

  workbook.add_name("name",[1,1])

We define a name of a rectangular range. With help of VBA methods this is done by supplying the row and column of the top left cell and the row and columns of the bottum right cell of the range.

  workbook.Names.Add("Name" => "name", "RefersToR1C1" => "=Z1S3:Z2S4")

Using RobustExcelOle defining a name referring to a rectangular range is done by providing the rows and columns as integer range.

  workbook.add_name("name",[1..2,3..4])

Now we can assign a value to that named range. With help of VBA methods this can be done by

  workbook.Names.Item("name").RefersToRange.Value = [["foo", "bar"],[1.0, nil]]

Now we can read value of that range.

  workbook.Names.Item("rec_name").RefersToRange.Value
  => [["foo", "bar"],[1.0, nil]]

or

  workbook["name"]
  => [["foo", "bar"],[1.0, nil]]

Finally we can rename a range, and delete the name of a range. With help of VBA methods this can be achieved by

  workbook.Names.Item("name").Name = "new_name"
  workbook.Names.Item("new_name").Delete

Using RobustExcelOle, we write

  workbook.rename_name("name", "new_name")
  workbook.delete_name("name")

Now we can read the value of cell simply by providing the row and the column

  worksheet.Cells.Item(1,1).Value

or with RobustExcelOle

  worksheet[1,1] 
  => "foo

Similarly, you can write a cell.

  worksheet.Cells.Item(1,1).Value = "new_value"

or using RobustExcelOle

  worksheet[1,1] = "new_value"

In the following some details are being summarized. 

=== Accessing a range

You can access a range via its address or defined name. RobustExcelOle allows the R1C1- and the A1-format.

For example, you can access a range consisting of one cell by providing the row and and the column of a cell. 

  range = worksheet.range([1,1])

Using the A1-format and R1C1-format you write

  range = worksheet.range(["A1"]) 

and

  range = worksheet.range(["Z1S1"])

respectively.

You can access a rectangular range by providing the row and column of the top left cell and the row and column of the bottum right cell. 

  range = worksheet.range([1..3,1..4])

or using the A1-format.

  range = worksheet.range([1..3,"A".."D"])

or

  range = worksheet.range(["A1:D3"])

or using the R1C1-format

  range = worksheet.range(["Z1S1:Z3S4"])

Ranges containing infinite rows or columns can be defined, e.g., by setting the other parameter (columns or row) to +nil+: For example, the rows 1 to 3 you get by

  range = worksheet.range([1..3,nil])

The columns "A" to "C" you get with help of 
  
  range = worksheet.range([nil,"A".."B"])

You can yield a row also simply by providing the row number, e.g.
  
  range = worksheet.range(1)

You can also use the A1-format, e.g.

  range = worksheet.range(["1:3"])
  range = worksheet.range(["A:B"])

You can also apply relative references by using brackets, e.g.

  range = worksheet.range(["Z[1]S1:Z3S[4]"])

or

  range = worksheet.range([[1]..3,2..[4]])

You can access a range via its defined name with

  range = worksheet.range("name")

=== Getting and setting the value of a range

You get the value of a range with help of #[] by providing the address of the range, or apply #value on a range, e.g.

  worksheet["name"]

or

  worksheet[1..2,3..4]

or

  worksheet.range("name").value

or

  worksheet.range([1..2,3..4]).value

The value is being restricted to the used range.

If you want the values of the range as flat array, then use #values, e.g.

  range.values

=== Copying a range

Let's assume, you have a source range

  range = worksheet.range([1..2,3..5])

or, in A1-format,

  range = worksheet.range(["C1:E2"])

To copy it to the destination range (3..4,6..8), you can use 

  range.copy([3..4,6..8])

or, providing the upper left position only,

  range.copy([3,6])

You can copy the range into another worksheet of the same or another workbook, even in another Excel instance.

  range.copy([3,6], destination_sheet)

Moreover, you can state, whether you want to copy the values only, and whether you want to transpose the destination range.

  range.copy([3,6], destination_range, values_only: true, transpose: true)
  
Note that when you don't copy the values only but all formating as well, and you either copy into another Excel instance or transpose the range, the clipboard is being used. 

=== Naming a range

You can (re-) define a name referring to a range by stating its name, and the address. The address is given by integer-range-format, r1c1-format or a1-format. For example, you can define a name for a rectangular range by

  workbook.add_name("name",[1..2,3..5])

or

  workbook.add_name("name","Z1S3:Z2S5")

or

  workbook.add_name("name", "C1:E2")

Similarly you can define a name referring to a cell

  workbook.add_name("name",[1,1])

or

  workbook.add_name("name","Z1S1")

or

  workbook.add_name("name","A1")

and infinite ranges

  workbook.add_name("name",[1..2,nil])

or

  workbook.add_name("name", "Z1:Z2")

or

  workbook.add_name("name","1:2")

Furthermore, you can define a name using relative references with the r1c1-format.

  workbook.add_name("name", "Z1S[1]:Z[2]S4")

or

  workbook.add_name("name", [1..[2],[1]..4])

You can do the same for an worksheet.
You get all names defined in the workbook or worksheet using the method +names+.

  worksheet.names
  # => ["Sheet1!name"]

  workbook.names
  # => ["Sheet1!name", "four"]


=== Reading and writing the contents of a range

Assume you have opened a workbook:
 
  workbook = Workbook.open('spec/data/workbook.xls', visible: true)

You can get the contents of a range with a defined name with help of the method [] or +namevalue_glob+.

  workbook["name"] 
  => "value"

or

  workbook.namevalue_glob("name")
  => "value"

Using +namevalue_glob+, via the option +:default+ you can provide a value that is returned when the name cannot be found or some other error would occur.

  workbook.namvalue_glob("name", default: "default_value")

You can set the contents of a range with

  workbook["name"] = "new_value"

or

  workbook.set_namevalue_glob("name", "new_value")

You can color the range when setting the contents of a range.

  workbook.set_namevalue_glob("name", "new_value", color: 4)

Similarly, the contents of a named range can be read and modified in a worksheet

  worksheet = workbook.sheet(1)

  worksheet["name"]
  # => "old_value"

  worksheet["name"] = "new_value"

=== Reading and writing the contents of a range with a locally defined name

The contents of locally defined ranges can be read by

  worksheet.namevalue("name")
  => "value"

or

  excel.namevalue("name")
  => "value" 

and be modified by

  worksheet.set_namevalue("name", "value")

or

  excel.set_namevalue("name", "value")

Similarly to namevalue, you can provide a default value that is returned when ocurring an error.

  worksheet.namevalue("name", default: "default_value")

=== Accessing a cell

You can read a cell from a sheet object by providing the row and the column. For example, the following lines provide the value of the first cell (first row, first column):

  worksheet[1,1]
  => "foo

or

  worksheet.cellval(1,1)
  => "foo"

Similarly, you can write a cell.

  worksheet[1,1] = "new_value"

or

  worksheet.set_cellval(1,1,"new_value")


== Code

range.rb[https://github.com/Thomas008/robust_excel_ole/blob/master/lib/robust_excel_ole/range.rb]

worksheet.rb[https://github.com/Thomas008/robust_excel_ole/blob/master/lib/robust_excel_ole/worksheet.rb]
