= RobustExcelOle

== Reading and writing the contents of ranges and cells

RobustExcelOle enables to read and write the contents of ranges and cells in workbooks. This can be done from a Sheet, a Book or an Excel object representing a Worksheet, Workbook, or Application object, respectively. You can use VBA methods or methods provided by RobustExcelOle.

=== Introducing Example

Suppose you have opened a workbook without any defined names.

  book = Workbook.open('spec/data/workbook.xls', :visible => true)

Now we define a name that refers to a range consisting of only the first cell, i.e. the 1st row and 1st column. Using VBA methods, you can use

  book.Names.Add("Name" => "name", "RefersToR1C1" => "=Z1S1")

RobustExcelOle provides the method +add_name+.

  book.add_name("name",1,1)

Now we can assign a value to that named range. With help of VBA methods this can be done by

  book.Names.Item("name").RefersToRange.Value = "bar"

Using RobustExcelOle the assignment can be done by

  book["name"] = "bar"

Similarly, we can read the value of the range, using VBA methods

  book.Names.Item("name").RefersToRange.Value
  => "bar"

or RobustExcelOle

  book["name"]
  => "bar" 

Finally we can rename a range, and delete the name of a range. With help of VBA methods this can be achieved by

  book.Names.Item("name").Name = "new_name"
  book.Names.Item("new_name").Delete

Using RobustExcelOle, we write

  book.rename_range("name", "new_name")
  book.delete_name("name")

Suppose you have a worksheet

  sheet1 = book.sheet(1)

Now we can read the value of cell simply by providing the row and the column

  sheet.Cells.Item(1,1).Value

or with RobustExcelOle

  sheet[1,1].value  
  => "foo

Similarly, you can write a cell.

  sheet.Cells.Item(1,1).Value = "new_value"

or using RobustExcelOle

  sheet[1,1] = "new_value"

We can access a range consisting of one cell by providing the row and and the column of a cell.

  sheet.Range(sheet.Cells(1,1))

or using RobustExcelOle

  range = sheet.range(1,1)

Similarly you can access a rectangular range by providing the top left cell and the bottum right cell.

  range = sheet.Range(sheet.Cells(1,1), sheet.Cells(3,4))

or with help of RobustExcelOle

  range = sheet.range(1,1,3,4)

You can read the values by 

  range.values

We can copy and paste a range. The destination may be one cell. With help of VBA methods you would do

  range.Copy(:destination => sheet.range(6,2).ole_range)

or with help of RobustExcelOle

  range.copy(6,2)

If you provide a rectangular range as destination, the range might be copied several times.

  range.copy(10,1,30,30)

Suppose you want to define a named range consisting of several cells forming a rectangular. Using VBA methods this can be done by

  book.Names.Add("Name" => "rec_name", "RefersToR1C1" => "=Z1S2:Z3S4")

and using RobustExcelOle

  book.add_name("rec_name",1,2,3,4)

We assign values to the cells of that range

  book.Names.Item("rec_name").RefersToRange.Value = 
      [["foo", nil, "bar"], [nil, "foobar", nil], ["is", "nice", nil]]

or

  book["rec_name"] = [["foo", nil, "bar"], [nil, "foobar", nil], ["is", "nice", nil]]

Now we can read value of that range.

  book.Names.Item("rec_name").RefersToRange.Value
  => [["workbook", "sheet1", nil], [nil, "foobaaa", nil], ["is", "nice", nil]]

or

  book["rec_name"]
  => [["workbook", "sheet1", nil], [nil, "foobaaa", nil], ["is", "nice", nil]] 

In the following some details are being summarized. 

=== Naming a cell

You can (re-) define a name referring to a cell with help of VBA methods by stating its name, and the row and the column of the cell.

  book.add_name("name",1,1)

Defining a name referring to a rectangular range is done by stating the row and column of the top-left corner and the row and column of the bottom right corner.

  book.add_name("name",1,1,3,4)

Most methods can be done for Workbook, Sheet, and Excel objects.

=== Reading and writing the contents of a named range in a workbook.

Assume you have opened a workbook:
 
  book = Workbook.open('spec/data/workbook.xls', :visible => true)

You can get the contents of a range with a defined name with help of the method [] or +namevalue_glob+.

  book["name"] 
  => "value"

or

  book.namevalue_glob("name")
  => "value"

Using +namevalue_glob+, via the option +:default+ you can provide a value that is returned when the name cannot be found or some other error would occur.

  book.namvalue_glob("name", :default => "default_value")

You can set the contents of a range with

  book["name"] = "new_value"

or

  book.set_namevalue_glob("name", "new_value")

The method []= colors the written cell. You can specify the color of a changed range via the method +set_namevalue_glob+. 
  
  book.set_namevalue_glob("name", "new_value", :color => 4)

Similarly, the contents of a named range can be read and modified in a worksheet

  sheet = book.sheet(1)

  sheet["name"]
  => value

  sheet["name"] = "new_value" 

or an Application object.

  excel = book.excel

  excel["name"]
  => "value"

  excel["name"] = "new_value"

When saving, the written cells get discolored when using the option :discoloring

  book.save(:discoloring => true)

or

  book.save_as('spec/data/workbook.xls', :discoloring => true)

=== Reading and writing the contents of a range with a locally defined name

The contents of locally defined ranges can be read by

  sheet.namevalue("name")
  => "value"

or

  excel.namevalue("name")
  => "value" 

and be modified by

  sheet.set_namevalue("name", "value")

or

  excel.set_namevalue("name", "value")

Similarly to namevalue, you can provide a default value that is returned when ocurring an error.

  sheet.namevalue("name", :default => "default_value")

=== Accessing a cell

You can read a cell from a sheet object by providing the row and the column. For example, the following lines provide the value of the first cell (first row, first column):

  sheet[1,1].value  
  => "foo

or

  sheet.cellval(1,1)
  => "foo"

Similarly, you can write a cell.

  sheet[1,1] = "new_value"

or

  sheet.set_cellval(1,1,"new_value", :color => 42)

=== Accessing rows and columns

The methods Sheet#each, Sheet#each_row and Sheet#each_column enable to access each cell, row and column, respectively.

  sheet.each do |cell|
    # do something with cell
    # read every row, every column
  end

  sheet.each_row do |row|
    # do something with row
  end

  sheet.each_column do |column|
    # do something with column
  end

You access a range of a row by giving the number of the row, and optionally, the range of the cell numbers.

  sheet.row_range(1)  # => first row
  sheet.row_range(1, 1..3 )  # => first three cells of the first row  

Simarly you can access a range of a column.

  sheet.col_range(3)  # => third column
  sheet.col_range(3, 1..2)  # => first two cells of the third column

Within a row or column range you can access a certain cell.

  row_range[1]  # => first cell in row_range
  column_range[2] # => second cell in column_range

