= RobustExcelOle

== Accessing and processing worksheets

Worksheets are represented by Worksheet objects.

Assume you have opened a workbook

  workbook = Workbook.open('spec/data/workbook.xls', :visible => true)

=== Accessing a worksheet.

You can access a worksheet by giving the number

  worksheet = book.sheet(1)

or its name

  worksheet = book.sheet('Sheet1')

You can get the first and last worksheet with

  worksheet = book.first_sheet  

and

  worksheet = book.last_sheet  

You can access all Worksheet objects by using the methods Workbook#each.

  workbook.each do |worksheet|               
    # do something with worksheet
  end

Once you have got a Sheet object (in RobustExcelOle), you can apply all VBA methods that you would apply to a VBA Worksheet object
(see https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet#methods).
For some common and complex tasks you can apply methods of RobustExcelOle.

=== Reading and changing the worksheet name

You can read and change the worksheet name.

  worksheet1.name
  # => "Sheet1"

  worksheet1.name = "new_sheet"

=== Adding and copying a worksheet.

You can add (append) an empty worksheet using

  workbook.add_empty_sheet

Additionally you can name it.

  workbook.add_empty_sheet(:as => 'sheet_name')

You can specify the position of the added empty worksheet.

  workbook.add_empty_sheet(:as => 'new_name', :before => another_sheet)

You can copy a worksheet and add it.

  workbook.copy_sheet sheet

Additionally you can specify a name and a position.

  workbook.copy_sheet(sheet, :as => 'new_name', :after => another_sheet)

If you want to copy a worksheet, if a worksheet +sheet+ is given, and add an empty worksheet, if no worksheet is given, then use

  workbook.add_or_copy_sheet

  workbook.add_or_copy_sheet(sheet, :as => 'new_name', :after => another_sheet)  

Note, that running in jruby, due to some restrictions of jruby, there is a workaround when adding or copy a worksheet at the end (appending): the last worksheet is being copied and deleted afterwards, in order to serve as a dummy worksheet. This may cause a different behaviour.

=== Accessing rows and columns

The methods Worksheet#each, Worksheet#each_row and Worksheet#each_column enable to access each cell, row and column, respectively.

  worksheet.each do |cell|
    # do something with cell
    # read every row, every column
  end

  worksheet.each_row do |row|
    # do something with row
  end

  worksheet.each_column do |column|
    # do something with column
  end

The method Worksheet#values yields a 2-dimensional array that contains the values in each row, e.g.

  worksheet.values
  => [["foo", "workbook", "sheet1"], ["foo", nil, "foobaaa"], ["matz", "is", "nice"]]

You access a range of a row by giving the number of the row, and optionally, the range of the cell numbers.

  worksheet.row_range(1)  # => first row
  worksheet.row_range(1, 1..3 )  # => first three cells of the first row  

Reading the values is enabled with help of #values:

  worksheet.row_range(1).values  

Simarly you can access a range of a column.

  worksheet.col_range(3)  # => third column
  worksheet.col_range(3, 1..2)  # => first two cells of the third column

Within a row or column range you can access a certain cell.

  row_range[1]  # => first cell in row_range
  column_range[2] # => second cell in column_range

=== Deleting and inserting rows and columns

For the following standard tasks no RobustExcelOle commands are provided, but VBA methods can be used.
Here are some examples:

  row1 = worksheet.row_range(1)
  row1.Delete

  row1.Insert(XlShiftDown,XlFormatFromLeftOrAbove)

  col1 = worksheet.col_range(1)
  col1.Insert

=== Getting and setting row height and column width

  row_hight = row1.RowHight
  row1.RowHeight = row_hight * 2

  col_width = col1.ColumnWidth
  col1.ColumnWidth = col_width * 2

=== Vertical and horizontal alignment of contents of rows

  row1.VerticalAlignment = XlVAlignCenter
  row1.HorizontalAlignment = XlHAlignLeft

== Code

worksheet.rb[https://github.com/Thomas008/robust_excel_ole/blob/master/lib/robust_excel_ole/worksheet.rb]
